
#ifndef PIECES_HPP
#define PIECES_HPP


#include <QObject>
#include <QPushButton>
#include "point.hpp"
#include <list>
#include <map>

class Box;
class ChessBoard;


// ABSTRACT piece class

class Piece : public QPushButton
{
    Q_OBJECT

public:
    Piece(int column, int row, ChessBoard* board, QWidget *parent = nullptr);
    virtual ~Piece() = default;
   
    void changePosition(int column, int row);
    
    // List of valid moves 
    std::list<Point> movements; // TODO change to Point* eventually

    static std::unordered_map<int, Piece*> friendlies;

    Point& getCoordinates();

    virtual void fillMovements() = 0;


protected:
    Point coordinates_;
    ChessBoard* chessboard_;

private:
    int id_;
    inline static int idCount;

signals:
    void movedPiece();

private slots:
    void updatePosition();
    void fillAllMovements();

};


// Concrete pieces classes

class King : public Piece
{
    Q_OBJECT

public:
    King(int column,  int row, ChessBoard* board, QWidget* parent);
    void fillMovements() override;

};

class Knight : public Piece
{
    Q_OBJECT

public:
    Knight(int column,  int row, ChessBoard* board, QWidget* parent);
    void fillMovements() override;

};

class Pawn : public Piece
{
    Q_OBJECT

public:
    Pawn(int column,  int row, ChessBoard* board, QWidget* parent);
    void fillMovements() override;

private:
    bool firstMove_{false};
};

#endif // PIECES_HPP
